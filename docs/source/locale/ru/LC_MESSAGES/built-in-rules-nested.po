# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Danil
# This file is distributed under the same license as the Lumache package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Lumache\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-16 21:29+0500\n"
"PO-Revision-Date: 2024-05-16 21:42+0500\n"
"Last-Translator: \n"
"Language-Team: ru <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Generated-By: Babel 2.10.3\n"
"X-Generator: Poedit 3.4.3\n"

#: ../../source/built-in-rules-nested.md:1
msgid "`Nested` - validation of nested and related data"
msgstr ""

#: ../../source/built-in-rules-nested.md:3
msgid "Basic usage (one-to-one relation)"
msgstr ""

#: ../../source/built-in-rules-nested.md:5
msgid ""
"In many cases there is a need to validate related data in addition to the "
"current entity / model. There is a `Nested` rule for this purpose."
msgstr ""

#: ../../source/built-in-rules-nested.md:8
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Rule\\Required;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"$data = ['author' => ['name' => 'John', 'age' => '17']];\n"
"$rule = new Nested([\n"
"    'title' => [new Required()],\n"
"    'author' => new Nested([\n"
"        'name' => [new Length(min: 3)],\n"
"        'age' => [new Number(min: 18)],\n"
"    ]),\n"
"]);\n"
"$errors = (new Validator())->validate($data, $rule)-"
">getErrorMessagesIndexedByPath();\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:26
msgid "The output of `$errors` will be:"
msgstr ""

#: ../../source/built-in-rules-nested.md:28
msgid ""
"[\n"
"    'title' => ['Value cannot be blank.'], \n"
"    'author.age' => ['Value must be no less than 18.'],\n"
"];\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:34
msgid ""
"In this example, an additional instance of the `Nested` rule is used for each "
"relation. Other ways of configuration are possible, they are described below."
msgstr ""

#: ../../source/built-in-rules-nested.md:37
msgid ""
"Other representations of the error list are covered in the [Result] section."
msgstr ""

#: ../../source/built-in-rules-nested.md:39
msgid "Configuration options"
msgstr ""

#: ../../source/built-in-rules-nested.md:41
msgid "Dot notation"
msgstr ""

#: ../../source/built-in-rules-nested.md:43
msgid ""
"Dot notation can be used as an alternative method of configuration. In this "
"case, the above example is represented as follows:"
msgstr ""

#: ../../source/built-in-rules-nested.md:46
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Rule\\Required;\n"
"\n"
"$rule = new Nested([\n"
"    'title' => [new Required()],\n"
"    'author.name' => [new Length(min: 3)],\n"
"    'author.age' => [new Number(min: 18)],\n"
"]);\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:59
msgid "It's also possible to combine both approaches:"
msgstr ""

#: ../../source/built-in-rules-nested.md:61
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Rule\\Required;\n"
"\n"
"$data = ['author' => ['name' => 'Alexey', 'age' => '31']];\n"
"$rule = new Nested([\n"
"    'content' => new Nested([\n"
"        'title' => [new Required()],\n"
"        'description' => [new Required()],\n"
"    ]),\n"
"    'author.name' => [new Length(min: 3)],\n"
"    'author.age' => [new Number(min: 18)],\n"
"]);\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:78
msgid "Omitting code"
msgstr ""

#: ../../source/built-in-rules-nested.md:80
msgid "Some code can be omitted for brevity."
msgstr ""

#: ../../source/built-in-rules-nested.md:82
msgid "Inner `Nested` instances"
msgstr ""

#: ../../source/built-in-rules-nested.md:84
msgid "Inner `Nested` instances can be omitted:"
msgstr ""

#: ../../source/built-in-rules-nested.md:86
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"\n"
"$rule = new Nested([\n"
"    'author' => [\n"
"        'name' => [new Length(min: 1)],\n"
"    ],\n"
"]);\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:97
msgid "Inner arrays for single rules"
msgstr ""

#: ../../source/built-in-rules-nested.md:99
msgid "Inner arrays for single rules can be omitted regardless of nesting level:"
msgstr ""

#: ../../source/built-in-rules-nested.md:101
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"\n"
"$rule = new Nested([\n"
"    'author' => [\n"
"        'name' => [\n"
"            'surname' => new Length(min: 1),\n"
"        ],\n"
"    ],\n"
"]);\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:114
msgid "Advanced usage"
msgstr ""

#: ../../source/built-in-rules-nested.md:116
msgid "One-to-many and many-to-many relations"
msgstr ""

#: ../../source/built-in-rules-nested.md:118
msgid ""
"The example in the [Basic usage] section shows how to work with one-to-one "
"relations only, where the `Nested` rule is sufficient for referencing "
"relations. It can be combined with other complex rules, such as `Each`, to "
"validate one-to-many and many-to-many relations as well:"
msgstr ""

#: ../../source/built-in-rules-nested.md:122
msgid "Let's take this line chart set as an example:"
msgstr ""

#: ../../source/built-in-rules-nested.md:124
msgid ""
"$data = [\n"
"    'charts' => [\n"
"        [\n"
"            'points' => [\n"
"                ['coordinates' => ['x' => -11, 'y' => 11], 'rgb' => [1, 255, "
"0]],\n"
"                ['coordinates' => ['x' => -12, 'y' => 12], 'rgb' => [0, 2, "
"255]],\n"
"            ],\n"
"        ],\n"
"        [\n"
"            'points' => [\n"
"                ['coordinates' => ['x' => -1, 'y' => 1], 'rgb' => [0, 0, 0]],\n"
"                ['coordinates' => ['x' => -2, 'y' => 2], 'rgb' => [128, 128, "
"128]],\n"
"            ],\n"
"        ],\n"
"        [\n"
"            'points' => [\n"
"                ['coordinates' => ['x' => -13, 'y' => 13], 'rgb' => [3, 255, "
"0]],\n"
"                ['coordinates' => ['x' => -14, 'y' => 14], 'rgb' => [0, 4, "
"255]],\n"
"            ],\n"
"        ],\n"
"    ],\n"
"];\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:149
msgid ""
"Visual representation of it might look like this (also available at "
"[JSFiddle]):"
msgstr ""

#: ../../source/built-in-rules-nested.md:151
msgid "![Chart example](../images/chart.png)"
msgstr ""

#: ../../source/built-in-rules-nested.md:151
msgid "Chart example"
msgstr ""

#: ../../source/built-in-rules-nested.md:153
msgid "Let's add the rules and modify the data a bit to contain invalid items:"
msgstr ""

#: ../../source/built-in-rules-nested.md:155
msgid ""
"use Yiisoft\\Validator\\Rule\\Count;\n"
"use Yiisoft\\Validator\\Rule\\Each;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"use Yiisoft\\Validator\\Validator;\n"
"\n"
"$data = [\n"
"    'charts' => [\n"
"        [\n"
"            'points' => [\n"
"                ['coordinates' => ['x' => -11, 'y' => 11], 'rgb' => [-1, 256, "
"0]],\n"
"                ['coordinates' => ['x' => -12, 'y' => 12], 'rgb' => [0, -2, "
"257]],\n"
"            ],\n"
"        ],\n"
"        [\n"
"            'points' => [\n"
"                ['coordinates' => ['x' => -1, 'y' => 1], 'rgb' => [0, 0, 0]],\n"
"                ['coordinates' => ['x' => -2, 'y' => 2], 'rgb' => [255, 255, "
"255]],\n"
"            ],\n"
"        ],\n"
"        [\n"
"            'points' => [\n"
"                ['coordinates' => ['x' => -13, 'y' => 13], 'rgb' => [-3, 258, "
"0]],\n"
"                ['coordinates' => ['x' => -14, 'y' => 14], 'rgb' => [0, -4, "
"259]],\n"
"            ],\n"
"        ],\n"
"    ],\n"
"];\n"
"$rule = new Nested([\n"
"    'charts' => new Each([\n"
"        new Nested([\n"
"            'points' => new Each([\n"
"                new Nested([\n"
"                    'coordinates' => new Nested([\n"
"                        'x' => [new Number(min: -10, max: 10)],\n"
"                        'y' => [new Number(min: -10, max: 10)],\n"
"                    ]),\n"
"                    'rgb' => new Each([\n"
"                        new Count(3),\n"
"                        new Number(min: 0, max: 255),\n"
"                    ]),\n"
"                ]),\n"
"            ]),\n"
"        ]),\n"
"    ]),\n"
"]);\n"
"$result = (new Validator())->validate($data, $rule);\n"
"$errors = $result->getErrorMessagesIndexedByPath();\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:206
msgid "The contents of the errors will be:"
msgstr ""

#: ../../source/built-in-rules-nested.md:208
msgid ""
"$errors = [\n"
"    'charts.0.points.0.coordinates.x' => ['Value must be no less than -10.'],\n"
"    // ...\n"
"    'charts.0.points.0.rgb.0' => ['Value must be no less than 0. -1 given.'],\n"
"    // ...\n"
"];\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:217
msgid "Using `*` shortcut"
msgstr ""

#: ../../source/built-in-rules-nested.md:219
msgid "A `*` shortcut can be used to simplify `Nested` and `Each` combinations:"
msgstr ""

#: ../../source/built-in-rules-nested.md:221
msgid ""
"use Yiisoft\\Validator\\Rule\\Count;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"\n"
"$rule = new Nested([\n"
"    'charts.*.points.*.coordinates.x' => [new Number(min: -10, max: 10)],\n"
"    'charts.*.points.*.coordinates.y' => [new Number(min: -10, max: 10)],\n"
"    'charts.*.points.*.rgb' => [\n"
"        new Count(3),\n"
"        new Number(min: 0, max: 255),\n"
"    ],\n"
"]);\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:236
msgid "With additional grouping, it can also be rewritten like this:"
msgstr ""

#: ../../source/built-in-rules-nested.md:238
msgid ""
"use Yiisoft\\Validator\\Rule\\Count;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"\n"
"$rule = new Nested([\n"
"    'charts.*.points.*.coordinates' => new Nested([\n"
"        'x' => [new Number(min: -10, max: 10)],\n"
"        'y' => [new Number(min: -10, max: 10)],\n"
"    ]),\n"
"    'charts.*.points.*.rgb' => [\n"
"        new Count(3),\n"
"        new Number(min: 0, max: 255),\n"
"    ],\n"
"]);\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:255
msgid ""
"This is less verbose, but the downside of this approach is that you can't "
"additionally configure dynamically generated `Nested` and `Each` pairs. If you "
"need to do this, use the explicit form of configuration (see the example "
"provided in  [Basic usage] section)."
msgstr ""

#: ../../source/built-in-rules-nested.md:259
msgid "Using PHP attributes"
msgstr ""

#: ../../source/built-in-rules-nested.md:261
msgid "Rules and relations can be declared via DTO with PHP attributes:"
msgstr ""

#: ../../source/built-in-rules-nested.md:263
msgid ""
"use Yiisoft\\Validator\\Rule\\Count;\n"
"use Yiisoft\\Validator\\Rule\\Each;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"use Yiisoft\\Validator\\Rule\\Number;\n"
"\n"
"final class ChartSet\n"
"{\n"
"    public function __construct(\n"
"        #[Each([new Nested(Chart::class)])]\n"
"        private array $charts,\n"
"    ) {\n"
"    }\n"
"}\n"
"\n"
"final class Chart\n"
"{\n"
"    public function __construct(\n"
"        #[Each([new Nested(Point::class)])]\n"
"        private array $points,\n"
"    ) {\n"
"    }\n"
"}\n"
"\n"
"final class Point\n"
"{\n"
"    public function __construct(\n"
"        #[Nested(Coordinates::class)]\n"
"        private Coordinates $coordinates,\n"
"        #[Count(exactly: 3)]\n"
"        #[Each([new Number(min: 0, max: 255)])]\n"
"        private array $rgb,\n"
"    ) {\n"
"    }\n"
"}\n"
"\n"
"final class Coordinates\n"
"{\n"
"    public function __construct(\n"
"        #[Number(min: -10, max: 10)]\n"
"        private int $x,\n"
"        #[Number(min: -10, max: 10)]\n"
"        private int $y,\n"
"    ) {\n"
"    }\n"
"}\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:311
msgid ""
"With the data in the associative array from the previous examples, we can use "
"the class just to fetch the rules:"
msgstr ""

#: ../../source/built-in-rules-nested.md:313
msgid ""
"$data = [\n"
"    'charts' => [\n"
"        [\n"
"            'points' => [\n"
"                ['coordinates' => ['x' => -11, 'y' => 11], 'rgb' => [-1, 256, "
"0]],\n"
"                ['coordinates' => ['x' => -12, 'y' => 12], 'rgb' => [0, -2, "
"257]],\n"
"            ],\n"
"        ],\n"
"        [\n"
"            'points' => [\n"
"                ['coordinates' => ['x' => -1, 'y' => 1], 'rgb' => [0, 0, 0]],\n"
"                ['coordinates' => ['x' => -2, 'y' => 2], 'rgb' => [255, 255, "
"255]],\n"
"            ],\n"
"        ],\n"
"        [\n"
"            'points' => [\n"
"                ['coordinates' => ['x' => -13, 'y' => 13], 'rgb' => [-3, 258, "
"0]],\n"
"                ['coordinates' => ['x' => -14, 'y' => 14], 'rgb' => [0, -4, "
"259]],\n"
"            ],\n"
"        ],\n"
"    ],\n"
"];\n"
"$result = $validator->validate($data, ChartSet::class);\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:339
msgid "Or provide data along with rules in the same objects:"
msgstr ""

#: ../../source/built-in-rules-nested.md:341
msgid ""
"$chartSet = new ChartSet(\n"
"    charts: [\n"
"        new Chart(\n"
"            points: [\n"
"                new Point(\n"
"                    coordinates: new Coordinates(x: -11, y: 11),\n"
"                    rgb: [-1, 256, 0],\n"
"                ),\n"
"                new Point(\n"
"                    coordinates: new Coordinates(x: -12, y: 12),\n"
"                    rgb: [0, -2, 257],\n"
"                ),\n"
"            ],       \n"
"        ),\n"
"        new Chart(\n"
"            points: [\n"
"                new Point(\n"
"                    coordinates: new Coordinates(x: -1, y: 1),\n"
"                    rgb: [0, 0, 0],\n"
"                ),\n"
"                new Point(\n"
"                    coordinates: new Coordinates(x: -2, y: 2),\n"
"                    rgb: [255, 255, 255],\n"
"                ),\n"
"            ],       \n"
"        ),\n"
"        new Chart(\n"
"            points: [\n"
"                new Point(\n"
"                    coordinates: new Coordinates(x: -13, y: 13),\n"
"                    rgb: [-3, 258, 0],\n"
"                ),\n"
"                new Point(\n"
"                    coordinates: new Coordinates(x: -14, y: 14),\n"
"                    rgb: [0, -4, 259],\n"
"                ),\n"
"            ],       \n"
"        ),\n"
"    ],\n"
");\n"
"$result = $validator->validate($chartSet); // Note `$rules` argument is `null` "
"here.\n"
"$errors = $result->getErrorMessagesIndexedByPath();\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:386
msgid ""
"For more information about the different ways to configure rules via PHP "
"attributes, see [Configuring rules via PHP attributes] section."
msgstr ""
"Для более детальной информации смотрите[Configuring rules via PHP attributes] "
"секцию."

#: ../../source/built-in-rules-nested.md:388
msgid ""
"For more information about possible data / rules combinations passed for "
"validation, refer to the [Using validator]  section."
msgstr ""

#: ../../source/built-in-rules-nested.md:391
msgid "Using keys containing separator / shortcut"
msgstr ""

#: ../../source/built-in-rules-nested.md:393
msgid ""
"If a key contains the separator (`.`), or `Each` shortcut (`*`), it must be "
"escaped with backslash (`\\`) in the rule config to work correctly. In the "
"input data escaping is not needed. Here is an example with 2 nested keys named "
"`author.data` and `name.surname`:"
msgstr ""

#: ../../source/built-in-rules-nested.md:397
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"\n"
"$rule = new Nested([\n"
"    'author\\.data.name\\.surname' => [\n"
"        new Length(min: 3),\n"
"    ],\n"
"]);\n"
"$data = [\n"
"    'author.data' => [\n"
"        'name.surname' => 'Dmitry',\n"
"    ],\n"
"];\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:413
msgid ""
"Note that escaping is still required when using multiple nested rules for "
"configuration:"
msgstr ""

#: ../../source/built-in-rules-nested.md:415
msgid ""
"use Yiisoft\\Validator\\Rule\\Length;\n"
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"\n"
"$rule = new Nested([\n"
"    'author\\.data' => new Nested([\n"
"        'name\\.surname' => [\n"
"            new Length(min: 3),\n"
"        ],\n"
"    ]),\n"
"]);\n"
"$data = [\n"
"    'author.data' => [\n"
"        'name.surname' => 'Dmitriy',\n"
"    ],\n"
"];\n"
msgstr ""

#: ../../source/built-in-rules-nested.md:433
msgid "The example with the `Each` shortcut (`*`):"
msgstr ""

#: ../../source/built-in-rules-nested.md:435
msgid ""
"use Yiisoft\\Validator\\Rule\\Nested;\n"
"\n"
"$rule = new Nested([\n"
"    'charts\\.list.*.points\\*list.*.coordinates\\.data.x' => [\n"
"        // ...\n"
"    ],\n"
"    'charts\\.list.*.points\\*list.*.coordinates\\.data.y' => [\n"
"        // ...\n"
"    ],\n"
"    'charts\\.list.*.points\\*list.*.rgb' => [\n"
"        // ...\n"
"    ],\n"
"]);\n"
"$data = [\n"
"    'charts.list' => [\n"
"        [\n"
"            'points*list' => [\n"
"                [\n"
"                    'coordinates.data' => ['x' => -11, 'y' => 11], 'rgb' => "
"[-1, 256, 0],\n"
"                ],\n"
"            ],\n"
"        ],\n"
"    ],\n"
"];\n"
msgstr ""
